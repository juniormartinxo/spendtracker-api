// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  //relationMode      = "prisma"
}

model User {
  uuid       String    @unique @default(uuid()) @db.VarChar(36)
  name       String
  email      String    @unique
  password   String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime? @default(now())
  active     Boolean   @default(true) @db.TinyInt

  Expense       Expense[]
  ExpenseType   ExpenseType[]
  ExpenseLocal  ExpenseLocal[]
  Installment   Installment[]
  PaymentMethod PaymentMethod[]

  @@index([email])
  @@index([uuid])
  @@map("users")
}

model Expense {
  uuid                        String        @unique @default(uuid()) @db.VarChar(36)
  user_uuid                   String        @db.VarChar(36)
  User                        User          @relation(fields: [user_uuid], references: [uuid])
  expense_type_uuid           String        @db.VarChar(36)
  ExpenseType                 ExpenseType   @relation(fields: [expense_type_uuid], references: [uuid])
  payment_methods_uuid        String        @db.VarChar(36)
  PaymentMethod               PaymentMethod @relation(fields: [payment_methods_uuid], references: [uuid])
  expense_local_uuid          String        @db.VarChar(36)
  ExpenseLocal                ExpenseLocal? @relation(fields: [expense_local_uuid], references: [uuid])
  description                 String        @db.VarChar(255)
  date                        DateTime      @db.Date()
  amount                      Decimal       @db.Decimal(10, 2)
  number_of_installments      Int           @default(1)
  installments_first_due_date DateTime      @default(now())
  observations                String?       @db.Text
  created_at                  DateTime      @default(now())
  updated_at                  DateTime?     @default(now())
  active                      Boolean       @default(true) @db.TinyInt

  Installment Installment[]

  @@index([expense_type_uuid])
  @@index([payment_methods_uuid])
  @@index([expense_local_uuid])
  @@index([uuid])
  @@map("expenses")
}

model ExpenseType {
  uuid        String    @unique @default(uuid()) @db.VarChar(36)
  user_uuid   String    @db.VarChar(36)
  User        User      @relation(fields: [user_uuid], references: [uuid])
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @default(now())
  active      Boolean   @default(true) @db.TinyInt

  Expense Expense[]

  @@index([uuid])
  @@map("expense_types")
}

model ExpenseLocal {
  uuid        String    @unique @default(uuid()) @db.VarChar(36)
  user_uuid   String    @db.VarChar(36)
  User        User      @relation(fields: [user_uuid], references: [uuid])
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @default(now())
  active      Boolean   @default(true) @db.TinyInt

  Expense Expense[]

  @@unique([user_uuid, description])
  @@index([uuid])
  @@map("expense_locals")
}

// Prestações
model Installment {
  uuid         String    @unique @default(uuid()) @db.VarChar(36)
  user_uuid    String    @db.VarChar(36)
  User         User      @relation(fields: [user_uuid], references: [uuid])
  expense_uuid String    @db.VarChar(36)
  Expense      Expense   @relation(fields: [expense_uuid], references: [uuid])
  number       Int
  due_date     DateTime  @db.Date()
  amount       Decimal   @db.Decimal(10, 2)
  paid         Boolean   @default(false)
  paid_date    DateTime? @db.Date()
  created_at   DateTime  @default(now())
  updated_at   DateTime? @default(now())
  active       Boolean   @default(true) @db.TinyInt

  @@index([expense_uuid])
  @@index([uuid])
  @@map("installments")
}

model PaymentMethod {
  uuid        String    @unique @default(uuid()) @db.VarChar(36)
  user_uuid   String    @db.VarChar(36)
  User        User      @relation(fields: [user_uuid], references: [uuid])
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @default(now())
  active      Boolean   @default(true) @db.TinyInt

  Expense Expense[]

  @@unique([user_uuid, description])
  @@index([uuid])
  @@map("payment_methods")
}
